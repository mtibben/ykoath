package ykoath

import (
	"fmt"
	"strings"
	"testing"
	"time"

	pcsc "github.com/gballet/go-libpcsclite"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

var names = []string{
	"test-test-test-test-s1-6-tr-1e5f2db9-477e-41af-bd2e-60bc569ae871",
	"test-test-test-test-s2-6-tr-2a7cbca9-baef-47e3-8ce8-788bc6853e12",
	"test-test-test-test-s5-6-tr-b01019ed-2af1-48cc-a64c-fa9b424db993",
	"test-test-test-test-s1-8-tr-e62171f0-4cf6-499e-b988-6ef36b213cc6",
	"test-test-test-test-s2-8-tr-458af9ee-caaa-4716-bfb8-bd828757955d",
	"test-test-test-test-s5-8-tr-2138a991-ec70-48cb-83e6-f80da47c93e4",
	"test-test-test-test-s1-6-nt-a70a2520-7e51-45b2-baab-0e35220b06fe",
	"test-test-test-test-s2-6-nt-83fe3208-b192-46c2-9cb2-14ee917b4d60",
	"test-test-test-test-s5-6-nt-cc9d122e-9b51-435e-b48e-ab1a17157e3c",
	"test-test-test-test-s1-8-nt-97a58938-8ea6-4143-ae10-8adb92bdc335",
	"test-test-test-test-s2-8-nt-887fd38b-80b3-4d7a-8671-82bef63151a6",
	"test-test-test-test-s5-8-nt-daee50d1-7bbf-41e6-a65b-d34046dba287",
}

type testCard struct {
	mock.Mock
}

func (t *testCard) Disconnect(d uint32) error {
	args := t.Called(d)
	return args.Error(0)
}

func (t *testCard) Transmit(b []byte) ([]byte, *pcsc.SCardIoRequest, error) {
	args := t.Called(b)
	return args.Get(0).([]byte), nil, args.Error(1)
}

func TestCalculate6DigitTouch(t *testing.T) {

	var (
		assert   = assert.New(t)
		testCard = new(testCard)
	)

	testCard.
		On(
			"Transmit",
			[]byte{
				0x00, 0xa4, 0x00, 0x01, 0x0a, 0x74, 0x08, 0x00, 0x00, 0x00, 0x00, 0x03,
				0x0c, 0xb6, 0xcd,
			}).
		Return(
			[]byte{
				0x71, 0x40, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d,
				0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x31,
				0x2d, 0x36, 0x2d, 0x74, 0x72, 0x2d, 0x31, 0x65, 0x35, 0x66, 0x32, 0x64,
				0x62, 0x39, 0x2d, 0x34, 0x37, 0x37, 0x65, 0x2d, 0x34, 0x31, 0x61, 0x66,
				0x2d, 0x62, 0x64, 0x32, 0x65, 0x2d, 0x36, 0x30, 0x62, 0x63, 0x35, 0x36,
				0x39, 0x61, 0x65, 0x38, 0x37, 0x31, 0x7c, 0x01, 0x06, 0x71, 0x40, 0x74,
				0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73,
				0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x32, 0x2d, 0x36, 0x2d,
				0x74, 0x72, 0x2d, 0x32, 0x61, 0x37, 0x63, 0x62, 0x63, 0x61, 0x39, 0x2d,
				0x62, 0x61, 0x65, 0x66, 0x2d, 0x34, 0x37, 0x65, 0x33, 0x2d, 0x38, 0x63,
				0x65, 0x38, 0x2d, 0x37, 0x38, 0x38, 0x62, 0x63, 0x36, 0x38, 0x35, 0x33,
				0x65, 0x31, 0x32, 0x7c, 0x01, 0x06, 0x71, 0x40, 0x74, 0x65, 0x73, 0x74,
				0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74,
				0x65, 0x73, 0x74, 0x2d, 0x73, 0x35, 0x2d, 0x36, 0x2d, 0x74, 0x72, 0x2d,
				0x62, 0x30, 0x31, 0x30, 0x31, 0x39, 0x65, 0x64, 0x2d, 0x32, 0x61, 0x66,
				0x31, 0x2d, 0x34, 0x38, 0x63, 0x63, 0x2d, 0x61, 0x36, 0x34, 0x63, 0x2d,
				0x66, 0x61, 0x39, 0x62, 0x34, 0x32, 0x34, 0x64, 0x62, 0x39, 0x39, 0x33,
				0x7c, 0x01, 0x06, 0x71, 0x40, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65,
				0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74,
				0x2d, 0x73, 0x31, 0x2d, 0x38, 0x2d, 0x74, 0x72, 0x2d, 0x65, 0x36, 0x32,
				0x31, 0x37, 0x31, 0x66, 0x30, 0x2d, 0x34, 0x63, 0x66, 0x36, 0x2d, 0x34,
				0x39, 0x39, 0x61, 0xff,
			},
			nil,
			nil,
		).Once().
		On(
			"Transmit",
			[]byte{
				0x00, 0xa5, 0x00, 0x00,
			}).
		Return(
			[]byte{
				0x65, 0x2d, 0x62, 0x39, 0x38, 0x38, 0x2d, 0x36, 0x65, 0x66, 0x33, 0x36,
				0x62, 0x32, 0x31, 0x33, 0x63, 0x63, 0x36, 0x7c, 0x01, 0x08, 0x71, 0x40,
				0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65,
				0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x32, 0x2d, 0x38,
				0x2d, 0x74, 0x72, 0x2d, 0x34, 0x35, 0x38, 0x61, 0x66, 0x39, 0x65, 0x65,
				0x2d, 0x63, 0x61, 0x61, 0x61, 0x2d, 0x34, 0x37, 0x31, 0x36, 0x2d, 0x62,
				0x66, 0x62, 0x38, 0x2d, 0x62, 0x64, 0x38, 0x32, 0x38, 0x37, 0x35, 0x37,
				0x39, 0x35, 0x35, 0x64, 0x7c, 0x01, 0x08, 0x71, 0x40, 0x74, 0x65, 0x73,
				0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d,
				0x74, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x35, 0x2d, 0x38, 0x2d, 0x74, 0x72,
				0x2d, 0x32, 0x31, 0x33, 0x38, 0x61, 0x39, 0x39, 0x31, 0x2d, 0x65, 0x63,
				0x37, 0x30, 0x2d, 0x34, 0x38, 0x63, 0x62, 0x2d, 0x38, 0x33, 0x65, 0x36,
				0x2d, 0x66, 0x38, 0x30, 0x64, 0x61, 0x34, 0x37, 0x63, 0x39, 0x33, 0x65,
				0x34, 0x7c, 0x01, 0x08, 0x71, 0x40, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74,
				0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73,
				0x74, 0x2d, 0x73, 0x31, 0x2d, 0x36, 0x2d, 0x6e, 0x74, 0x2d, 0x61, 0x37,
				0x30, 0x61, 0x32, 0x35, 0x32, 0x30, 0x2d, 0x37, 0x65, 0x35, 0x31, 0x2d,
				0x34, 0x35, 0x62, 0x32, 0x2d, 0x62, 0x61, 0x61, 0x62, 0x2d, 0x30, 0x65,
				0x33, 0x35, 0x32, 0x32, 0x30, 0x62, 0x30, 0x36, 0x66, 0x65, 0x76, 0x05,
				0x06, 0x00, 0x05, 0x6f, 0x01, 0x71, 0x40, 0x74, 0x65, 0x73, 0x74, 0x2d,
				0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65,
				0x73, 0x74, 0x61, 0xff,
			},
			nil,
			nil,
		).Once().
		On(
			"Transmit",
			[]byte{
				0x00, 0xa5, 0x00, 0x00,
			}).
		Return(
			[]byte{
				0x2d, 0x73, 0x32, 0x2d, 0x36, 0x2d, 0x6e, 0x74, 0x2d, 0x38, 0x33, 0x66,
				0x65, 0x33, 0x32, 0x30, 0x38, 0x2d, 0x62, 0x31, 0x39, 0x32, 0x2d, 0x34,
				0x36, 0x63, 0x32, 0x2d, 0x39, 0x63, 0x62, 0x32, 0x2d, 0x31, 0x34, 0x65,
				0x65, 0x39, 0x31, 0x37, 0x62, 0x34, 0x64, 0x36, 0x30, 0x76, 0x05, 0x06,
				0x00, 0x04, 0x4e, 0x8a, 0x71, 0x40, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74,
				0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73,
				0x74, 0x2d, 0x73, 0x35, 0x2d, 0x36, 0x2d, 0x6e, 0x74, 0x2d, 0x63, 0x63,
				0x39, 0x64, 0x31, 0x32, 0x32, 0x65, 0x2d, 0x39, 0x62, 0x35, 0x31, 0x2d,
				0x34, 0x33, 0x35, 0x65, 0x2d, 0x62, 0x34, 0x38, 0x65, 0x2d, 0x61, 0x62,
				0x31, 0x61, 0x31, 0x37, 0x31, 0x35, 0x37, 0x65, 0x33, 0x63, 0x76, 0x05,
				0x06, 0x00, 0x07, 0x9c, 0x83, 0x71, 0x40, 0x74, 0x65, 0x73, 0x74, 0x2d,
				0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65,
				0x73, 0x74, 0x2d, 0x73, 0x31, 0x2d, 0x38, 0x2d, 0x6e, 0x74, 0x2d, 0x39,
				0x37, 0x61, 0x35, 0x38, 0x39, 0x33, 0x38, 0x2d, 0x38, 0x65, 0x61, 0x36,
				0x2d, 0x34, 0x31, 0x34, 0x33, 0x2d, 0x61, 0x65, 0x31, 0x30, 0x2d, 0x38,
				0x61, 0x64, 0x62, 0x39, 0x32, 0x62, 0x64, 0x63, 0x33, 0x33, 0x35, 0x76,
				0x05, 0x08, 0x00, 0x5d, 0xb9, 0xab, 0x71, 0x40, 0x74, 0x65, 0x73, 0x74,
				0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74,
				0x65, 0x73, 0x74, 0x2d, 0x73, 0x32, 0x2d, 0x38, 0x2d, 0x6e, 0x74, 0x2d,
				0x38, 0x38, 0x37, 0x66, 0x64, 0x33, 0x38, 0x62, 0x2d, 0x38, 0x30, 0x62,
				0x33, 0x2d, 0x34, 0x64, 0x37, 0x61, 0x2d, 0x38, 0x36, 0x37, 0x31, 0x2d,
				0x38, 0x32, 0x61, 0x5a,
			},
			nil,
			nil,
		).Once().
		On(
			"Transmit",
			[]byte{
				0x00, 0xa5, 0x00, 0x00,
			}).
		Return(
			[]byte{
				0x62, 0x65, 0x66, 0x36, 0x33, 0x31, 0x35, 0x31, 0x61, 0x36, 0x76, 0x05,
				0x08, 0x04, 0xf5, 0x36, 0x2e, 0x71, 0x40, 0x74, 0x65, 0x73, 0x74, 0x2d,
				0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65,
				0x73, 0x74, 0x2d, 0x73, 0x35, 0x2d, 0x38, 0x2d, 0x6e, 0x74, 0x2d, 0x64,
				0x61, 0x65, 0x65, 0x35, 0x30, 0x64, 0x31, 0x2d, 0x37, 0x62, 0x62, 0x66,
				0x2d, 0x34, 0x31, 0x65, 0x36, 0x2d, 0x61, 0x36, 0x35, 0x62, 0x2d, 0x64,
				0x33, 0x34, 0x30, 0x34, 0x36, 0x64, 0x62, 0x61, 0x32, 0x38, 0x37, 0x76,
				0x05, 0x08, 0x04, 0xaf, 0x17, 0x64, 0x90, 0x00,
			},
			nil,
			nil,
		).Once().
		On(
			"Transmit",
			[]byte{
				0x00, 0xa2, 0x00, 0x01, 0x4c, 0x71, 0x40, 0x74, 0x65, 0x73, 0x74, 0x2d,
				0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65,
				0x73, 0x74, 0x2d, 0x73, 0x31, 0x2d, 0x36, 0x2d, 0x74, 0x72, 0x2d, 0x31,
				0x65, 0x35, 0x66, 0x32, 0x64, 0x62, 0x39, 0x2d, 0x34, 0x37, 0x37, 0x65,
				0x2d, 0x34, 0x31, 0x61, 0x66, 0x2d, 0x62, 0x64, 0x32, 0x65, 0x2d, 0x36,
				0x30, 0x62, 0x63, 0x35, 0x36, 0x39, 0x61, 0x65, 0x38, 0x37, 0x31, 0x74,
				0x08, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0c, 0xb6, 0xcd,
			}).
		Return(
			[]byte{
				0x76, 0x05, 0x06, 0x00, 0x0c, 0xc7, 0xe4, 0x90, 0x00,
			},
			nil,
			nil,
		).Once()

	client := new(OATH)
	client.card = testCard
	client.Clock = func() time.Time {
		return time.Unix(1534946339, 0)
	}

	called := false

	res, err := client.Calculate("test-test-test-test-s1-6-tr-1e5f2db9-477e-41af-bd2e-60bc569ae871", func(name string) error {
		called = true
		assert.Equal("test-test-test-test-s1-6-tr-1e5f2db9-477e-41af-bd2e-60bc569ae871", name)
		return nil
	})

	assert.Equal("837604", res)
	assert.True(called)

	assert.NoError(err)

	testCard.AssertExpectations(t)

}

func TestCalculate8DigitNoTouch(t *testing.T) {

	var (
		assert   = assert.New(t)
		testCard = new(testCard)
	)

	testCard.
		On(
			"Transmit",
			[]byte{
				0x00, 0xa4, 0x00, 0x01, 0x0a, 0x74, 0x08, 0x00, 0x00, 0x00, 0x00, 0x03,
				0x0c, 0xb6, 0xcd,
			}).
		Return(
			[]byte{
				0x71, 0x40, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d,
				0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x31,
				0x2d, 0x36, 0x2d, 0x74, 0x72, 0x2d, 0x31, 0x65, 0x35, 0x66, 0x32, 0x64,
				0x62, 0x39, 0x2d, 0x34, 0x37, 0x37, 0x65, 0x2d, 0x34, 0x31, 0x61, 0x66,
				0x2d, 0x62, 0x64, 0x32, 0x65, 0x2d, 0x36, 0x30, 0x62, 0x63, 0x35, 0x36,
				0x39, 0x61, 0x65, 0x38, 0x37, 0x31, 0x7c, 0x01, 0x06, 0x71, 0x40, 0x74,
				0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73,
				0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x32, 0x2d, 0x36, 0x2d,
				0x74, 0x72, 0x2d, 0x32, 0x61, 0x37, 0x63, 0x62, 0x63, 0x61, 0x39, 0x2d,
				0x62, 0x61, 0x65, 0x66, 0x2d, 0x34, 0x37, 0x65, 0x33, 0x2d, 0x38, 0x63,
				0x65, 0x38, 0x2d, 0x37, 0x38, 0x38, 0x62, 0x63, 0x36, 0x38, 0x35, 0x33,
				0x65, 0x31, 0x32, 0x7c, 0x01, 0x06, 0x71, 0x40, 0x74, 0x65, 0x73, 0x74,
				0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74,
				0x65, 0x73, 0x74, 0x2d, 0x73, 0x35, 0x2d, 0x36, 0x2d, 0x74, 0x72, 0x2d,
				0x62, 0x30, 0x31, 0x30, 0x31, 0x39, 0x65, 0x64, 0x2d, 0x32, 0x61, 0x66,
				0x31, 0x2d, 0x34, 0x38, 0x63, 0x63, 0x2d, 0x61, 0x36, 0x34, 0x63, 0x2d,
				0x66, 0x61, 0x39, 0x62, 0x34, 0x32, 0x34, 0x64, 0x62, 0x39, 0x39, 0x33,
				0x7c, 0x01, 0x06, 0x71, 0x40, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65,
				0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74,
				0x2d, 0x73, 0x31, 0x2d, 0x38, 0x2d, 0x74, 0x72, 0x2d, 0x65, 0x36, 0x32,
				0x31, 0x37, 0x31, 0x66, 0x30, 0x2d, 0x34, 0x63, 0x66, 0x36, 0x2d, 0x34,
				0x39, 0x39, 0x61, 0xff,
			},
			nil,
		).Once().
		On(
			"Transmit",
			[]byte{
				0x00, 0xa5, 0x00, 0x00,
			}).
		Return(
			[]byte{
				0x65, 0x2d, 0x62, 0x39, 0x38, 0x38, 0x2d, 0x36, 0x65, 0x66, 0x33, 0x36,
				0x62, 0x32, 0x31, 0x33, 0x63, 0x63, 0x36, 0x7c, 0x01, 0x08, 0x71, 0x40,
				0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65,
				0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x32, 0x2d, 0x38,
				0x2d, 0x74, 0x72, 0x2d, 0x34, 0x35, 0x38, 0x61, 0x66, 0x39, 0x65, 0x65,
				0x2d, 0x63, 0x61, 0x61, 0x61, 0x2d, 0x34, 0x37, 0x31, 0x36, 0x2d, 0x62,
				0x66, 0x62, 0x38, 0x2d, 0x62, 0x64, 0x38, 0x32, 0x38, 0x37, 0x35, 0x37,
				0x39, 0x35, 0x35, 0x64, 0x7c, 0x01, 0x08, 0x71, 0x40, 0x74, 0x65, 0x73,
				0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d,
				0x74, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x35, 0x2d, 0x38, 0x2d, 0x74, 0x72,
				0x2d, 0x32, 0x31, 0x33, 0x38, 0x61, 0x39, 0x39, 0x31, 0x2d, 0x65, 0x63,
				0x37, 0x30, 0x2d, 0x34, 0x38, 0x63, 0x62, 0x2d, 0x38, 0x33, 0x65, 0x36,
				0x2d, 0x66, 0x38, 0x30, 0x64, 0x61, 0x34, 0x37, 0x63, 0x39, 0x33, 0x65,
				0x34, 0x7c, 0x01, 0x08, 0x71, 0x40, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74,
				0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73,
				0x74, 0x2d, 0x73, 0x31, 0x2d, 0x36, 0x2d, 0x6e, 0x74, 0x2d, 0x61, 0x37,
				0x30, 0x61, 0x32, 0x35, 0x32, 0x30, 0x2d, 0x37, 0x65, 0x35, 0x31, 0x2d,
				0x34, 0x35, 0x62, 0x32, 0x2d, 0x62, 0x61, 0x61, 0x62, 0x2d, 0x30, 0x65,
				0x33, 0x35, 0x32, 0x32, 0x30, 0x62, 0x30, 0x36, 0x66, 0x65, 0x76, 0x05,
				0x06, 0x00, 0x05, 0x6f, 0x01, 0x71, 0x40, 0x74, 0x65, 0x73, 0x74, 0x2d,
				0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65,
				0x73, 0x74, 0x61, 0xff,
			},
			nil,
		).Once().
		On(
			"Transmit",
			[]byte{
				0x00, 0xa5, 0x00, 0x00,
			}).
		Return(
			[]byte{
				0x2d, 0x73, 0x32, 0x2d, 0x36, 0x2d, 0x6e, 0x74, 0x2d, 0x38, 0x33, 0x66,
				0x65, 0x33, 0x32, 0x30, 0x38, 0x2d, 0x62, 0x31, 0x39, 0x32, 0x2d, 0x34,
				0x36, 0x63, 0x32, 0x2d, 0x39, 0x63, 0x62, 0x32, 0x2d, 0x31, 0x34, 0x65,
				0x65, 0x39, 0x31, 0x37, 0x62, 0x34, 0x64, 0x36, 0x30, 0x76, 0x05, 0x06,
				0x00, 0x04, 0x4e, 0x8a, 0x71, 0x40, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74,
				0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73,
				0x74, 0x2d, 0x73, 0x35, 0x2d, 0x36, 0x2d, 0x6e, 0x74, 0x2d, 0x63, 0x63,
				0x39, 0x64, 0x31, 0x32, 0x32, 0x65, 0x2d, 0x39, 0x62, 0x35, 0x31, 0x2d,
				0x34, 0x33, 0x35, 0x65, 0x2d, 0x62, 0x34, 0x38, 0x65, 0x2d, 0x61, 0x62,
				0x31, 0x61, 0x31, 0x37, 0x31, 0x35, 0x37, 0x65, 0x33, 0x63, 0x76, 0x05,
				0x06, 0x00, 0x07, 0x9c, 0x83, 0x71, 0x40, 0x74, 0x65, 0x73, 0x74, 0x2d,
				0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65,
				0x73, 0x74, 0x2d, 0x73, 0x31, 0x2d, 0x38, 0x2d, 0x6e, 0x74, 0x2d, 0x39,
				0x37, 0x61, 0x35, 0x38, 0x39, 0x33, 0x38, 0x2d, 0x38, 0x65, 0x61, 0x36,
				0x2d, 0x34, 0x31, 0x34, 0x33, 0x2d, 0x61, 0x65, 0x31, 0x30, 0x2d, 0x38,
				0x61, 0x64, 0x62, 0x39, 0x32, 0x62, 0x64, 0x63, 0x33, 0x33, 0x35, 0x76,
				0x05, 0x08, 0x00, 0x5d, 0xb9, 0xab, 0x71, 0x40, 0x74, 0x65, 0x73, 0x74,
				0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74,
				0x65, 0x73, 0x74, 0x2d, 0x73, 0x32, 0x2d, 0x38, 0x2d, 0x6e, 0x74, 0x2d,
				0x38, 0x38, 0x37, 0x66, 0x64, 0x33, 0x38, 0x62, 0x2d, 0x38, 0x30, 0x62,
				0x33, 0x2d, 0x34, 0x64, 0x37, 0x61, 0x2d, 0x38, 0x36, 0x37, 0x31, 0x2d,
				0x38, 0x32, 0x61, 0x5a,
			},
			nil,
		).Once().
		On(
			"Transmit",
			[]byte{
				0x00, 0xa5, 0x00, 0x00,
			}).
		Return(
			[]byte{
				0x62, 0x65, 0x66, 0x36, 0x33, 0x31, 0x35, 0x31, 0x61, 0x36, 0x76, 0x05,
				0x08, 0x04, 0xf5, 0x36, 0x2e, 0x71, 0x40, 0x74, 0x65, 0x73, 0x74, 0x2d,
				0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65,
				0x73, 0x74, 0x2d, 0x73, 0x35, 0x2d, 0x38, 0x2d, 0x6e, 0x74, 0x2d, 0x64,
				0x61, 0x65, 0x65, 0x35, 0x30, 0x64, 0x31, 0x2d, 0x37, 0x62, 0x62, 0x66,
				0x2d, 0x34, 0x31, 0x65, 0x36, 0x2d, 0x61, 0x36, 0x35, 0x62, 0x2d, 0x64,
				0x33, 0x34, 0x30, 0x34, 0x36, 0x64, 0x62, 0x61, 0x32, 0x38, 0x37, 0x76,
				0x05, 0x08, 0x04, 0xaf, 0x17, 0x64, 0x90, 0x00,
			},
			nil,
		)

	client := new(OATH)
	client.card = testCard
	client.Clock = func() time.Time {
		return time.Unix(1534946339, 0)
	}

	called := false

	res, err := client.Calculate("test-test-test-test-s2-8-nt-887fd38b-80b3-4d7a-8671-82bef63151a6", func(name string) error {
		called = true
		assert.Equal("test-test-test-test-s2-8-nt-887fd38b-80b3-4d7a-8671-82bef63151a6", name)
		return nil
	})

	assert.False(called)
	assert.Equal("83179054", res)

	assert.NoError(err)

	testCard.AssertExpectations(t)

}

func TestList(t *testing.T) {

	var (
		assert   = assert.New(t)
		testCard = new(testCard)
	)

	testCard.
		On(
			"Transmit",
			[]byte{
				0x00, 0xa1, 0x00, 0x00,
			}).
		Return(
			[]byte{
				0x72, 0x41, 0x21, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74,
				0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x73,
				0x31, 0x2d, 0x36, 0x2d, 0x74, 0x72, 0x2d, 0x31, 0x65, 0x35, 0x66, 0x32,
				0x64, 0x62, 0x39, 0x2d, 0x34, 0x37, 0x37, 0x65, 0x2d, 0x34, 0x31, 0x61,
				0x66, 0x2d, 0x62, 0x64, 0x32, 0x65, 0x2d, 0x36, 0x30, 0x62, 0x63, 0x35,
				0x36, 0x39, 0x61, 0x65, 0x38, 0x37, 0x31, 0x72, 0x41, 0x22, 0x74, 0x65,
				0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74,
				0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x32, 0x2d, 0x36, 0x2d, 0x74,
				0x72, 0x2d, 0x32, 0x61, 0x37, 0x63, 0x62, 0x63, 0x61, 0x39, 0x2d, 0x62,
				0x61, 0x65, 0x66, 0x2d, 0x34, 0x37, 0x65, 0x33, 0x2d, 0x38, 0x63, 0x65,
				0x38, 0x2d, 0x37, 0x38, 0x38, 0x62, 0x63, 0x36, 0x38, 0x35, 0x33, 0x65,
				0x31, 0x32, 0x72, 0x41, 0x23, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65,
				0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74,
				0x2d, 0x73, 0x35, 0x2d, 0x36, 0x2d, 0x74, 0x72, 0x2d, 0x62, 0x30, 0x31,
				0x30, 0x31, 0x39, 0x65, 0x64, 0x2d, 0x32, 0x61, 0x66, 0x31, 0x2d, 0x34,
				0x38, 0x63, 0x63, 0x2d, 0x61, 0x36, 0x34, 0x63, 0x2d, 0x66, 0x61, 0x39,
				0x62, 0x34, 0x32, 0x34, 0x64, 0x62, 0x39, 0x39, 0x33, 0x72, 0x41, 0x21,
				0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65,
				0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x31, 0x2d, 0x38,
				0x2d, 0x74, 0x72, 0x2d, 0x65, 0x36, 0x32, 0x31, 0x37, 0x31, 0x66, 0x30,
				0x2d, 0x34, 0x63, 0x66, 0x36, 0x2d, 0x34, 0x39, 0x39, 0x65, 0x2d, 0x62,
				0x39, 0x38, 0x61, 0xff,
			},
			nil,
		).Once().
		On(
			"Transmit",
			[]byte{
				0x00, 0xa5, 0x00, 0x00,
			}).
		Return(
			[]byte{
				0x38, 0x2d, 0x36, 0x65, 0x66, 0x33, 0x36, 0x62, 0x32, 0x31, 0x33, 0x63,
				0x63, 0x36, 0x72, 0x41, 0x22, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65,
				0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74,
				0x2d, 0x73, 0x32, 0x2d, 0x38, 0x2d, 0x74, 0x72, 0x2d, 0x34, 0x35, 0x38,
				0x61, 0x66, 0x39, 0x65, 0x65, 0x2d, 0x63, 0x61, 0x61, 0x61, 0x2d, 0x34,
				0x37, 0x31, 0x36, 0x2d, 0x62, 0x66, 0x62, 0x38, 0x2d, 0x62, 0x64, 0x38,
				0x32, 0x38, 0x37, 0x35, 0x37, 0x39, 0x35, 0x35, 0x64, 0x72, 0x41, 0x23,
				0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65,
				0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x35, 0x2d, 0x38,
				0x2d, 0x74, 0x72, 0x2d, 0x32, 0x31, 0x33, 0x38, 0x61, 0x39, 0x39, 0x31,
				0x2d, 0x65, 0x63, 0x37, 0x30, 0x2d, 0x34, 0x38, 0x63, 0x62, 0x2d, 0x38,
				0x33, 0x65, 0x36, 0x2d, 0x66, 0x38, 0x30, 0x64, 0x61, 0x34, 0x37, 0x63,
				0x39, 0x33, 0x65, 0x34, 0x72, 0x41, 0x21, 0x74, 0x65, 0x73, 0x74, 0x2d,
				0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65,
				0x73, 0x74, 0x2d, 0x73, 0x31, 0x2d, 0x36, 0x2d, 0x6e, 0x74, 0x2d, 0x61,
				0x37, 0x30, 0x61, 0x32, 0x35, 0x32, 0x30, 0x2d, 0x37, 0x65, 0x35, 0x31,
				0x2d, 0x34, 0x35, 0x62, 0x32, 0x2d, 0x62, 0x61, 0x61, 0x62, 0x2d, 0x30,
				0x65, 0x33, 0x35, 0x32, 0x32, 0x30, 0x62, 0x30, 0x36, 0x66, 0x65, 0x72,
				0x41, 0x22, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d,
				0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x32,
				0x2d, 0x36, 0x2d, 0x6e, 0x74, 0x2d, 0x38, 0x33, 0x66, 0x65, 0x33, 0x32,
				0x30, 0x38, 0x61, 0xff,
			},
			nil,
		).Once().
		On(
			"Transmit",
			[]byte{
				0x00, 0xa5, 0x00, 0x00,
			}).
		Return(
			[]byte{
				0x2d, 0x62, 0x31, 0x39, 0x32, 0x2d, 0x34, 0x36, 0x63, 0x32, 0x2d, 0x39,
				0x63, 0x62, 0x32, 0x2d, 0x31, 0x34, 0x65, 0x65, 0x39, 0x31, 0x37, 0x62,
				0x34, 0x64, 0x36, 0x30, 0x72, 0x41, 0x23, 0x74, 0x65, 0x73, 0x74, 0x2d,
				0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65,
				0x73, 0x74, 0x2d, 0x73, 0x35, 0x2d, 0x36, 0x2d, 0x6e, 0x74, 0x2d, 0x63,
				0x63, 0x39, 0x64, 0x31, 0x32, 0x32, 0x65, 0x2d, 0x39, 0x62, 0x35, 0x31,
				0x2d, 0x34, 0x33, 0x35, 0x65, 0x2d, 0x62, 0x34, 0x38, 0x65, 0x2d, 0x61,
				0x62, 0x31, 0x61, 0x31, 0x37, 0x31, 0x35, 0x37, 0x65, 0x33, 0x63, 0x72,
				0x41, 0x21, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d,
				0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x31,
				0x2d, 0x38, 0x2d, 0x6e, 0x74, 0x2d, 0x39, 0x37, 0x61, 0x35, 0x38, 0x39,
				0x33, 0x38, 0x2d, 0x38, 0x65, 0x61, 0x36, 0x2d, 0x34, 0x31, 0x34, 0x33,
				0x2d, 0x61, 0x65, 0x31, 0x30, 0x2d, 0x38, 0x61, 0x64, 0x62, 0x39, 0x32,
				0x62, 0x64, 0x63, 0x33, 0x33, 0x35, 0x72, 0x41, 0x22, 0x74, 0x65, 0x73,
				0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d,
				0x74, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x32, 0x2d, 0x38, 0x2d, 0x6e, 0x74,
				0x2d, 0x38, 0x38, 0x37, 0x66, 0x64, 0x33, 0x38, 0x62, 0x2d, 0x38, 0x30,
				0x62, 0x33, 0x2d, 0x34, 0x64, 0x37, 0x61, 0x2d, 0x38, 0x36, 0x37, 0x31,
				0x2d, 0x38, 0x32, 0x62, 0x65, 0x66, 0x36, 0x33, 0x31, 0x35, 0x31, 0x61,
				0x36, 0x72, 0x41, 0x23, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73,
				0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d,
				0x73, 0x35, 0x61, 0x2a,
			},
			nil,
		).Once().
		On(
			"Transmit",
			[]byte{
				0x00, 0xa5, 0x00, 0x00,
			}).
		Return(
			[]byte{
				0x2d, 0x38, 0x2d, 0x6e, 0x74, 0x2d, 0x64, 0x61, 0x65, 0x65, 0x35, 0x30,
				0x64, 0x31, 0x2d, 0x37, 0x62, 0x62, 0x66, 0x2d, 0x34, 0x31, 0x65, 0x36,
				0x2d, 0x61, 0x36, 0x35, 0x62, 0x2d, 0x64, 0x33, 0x34, 0x30, 0x34, 0x36,
				0x64, 0x62, 0x61, 0x32, 0x38, 0x37, 0x90, 0x00,
			},
			nil,
		).Once()

	client := new(OATH)
	client.card = testCard

	res, err := client.List()

	assert.Len(res, 12)

	for idx, name := range names {

		var (
			alg Algorithm
		)

		if strings.Contains(name, "-s1-") {
			alg = HmacSha1
		}

		if strings.Contains(name, "-s2-") {
			alg = HmacSha256
		}

		if strings.Contains(name, "-s5-") {
			alg = HmacSha512
		}

		assert.Equal(alg, res[idx].Algorithm)
		assert.Equal(name, res[idx].Name)
		assert.Equal(Totp, res[idx].Type)
		assert.Equal(fmt.Sprintf("%s (%s TOTP)", name, alg.String()), res[idx].String())

	}

	assert.NoError(err)

	testCard.AssertExpectations(t)

}

func TestPutAndCalculateTestVector(t *testing.T) {

	var (
		assert   = assert.New(t)
		testCard = new(testCard)
	)

	testCard.
		On(
			"Transmit",
			[]byte{
				0x00, 0x01, 0x00, 0x00, 0x24, 0x71, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x76,
				0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x16, 0x21, 0x08, 0x31, 0x32, 0x33,
				0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35,
				0x36, 0x37, 0x38, 0x39, 0x30,
			}).
		Return(
			[]byte{
				0x90, 0x00,
			},
			nil,
		).Once().
		On(
			"Transmit",
			[]byte{
				0x00, 0xa4, 0x00, 0x01, 0x0a, 0x74, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x01,
			}).
		Return(
			[]byte{
				0x71, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72,
				0x76, 0x05, 0x08, 0x05, 0x9e, 0xb4, 0xea, 0x90, 0x00,
			},
			nil,
		).Once()

	client := new(OATH)
	client.card = testCard
	client.Clock = func() time.Time {
		return time.Unix(59, 0)
	}

	err := client.Put("testvector", HmacSha1, Totp, 8, []byte("12345678901234567890"), false)

	assert.NoError(err)

	res, err := client.Calculate("testvector", nil)

	assert.Equal("94287082", res)

	assert.NoError(err)

	testCard.AssertExpectations(t)

}

func TestSelectTOTP(t *testing.T) {

	var (
		assert   = assert.New(t)
		testCard = new(testCard)
	)

	testCard.
		On(
			"Transmit",
			[]byte{
				0x00, 0xa4, 0x04, 0x00, 0x07, 0xa0, 0x00, 0x00, 0x05, 0x27, 0x21, 0x01,
			}).
		Return(
			[]byte{
				0x79, 0x03, 0x04, 0x03, 0x03, 0x71, 0x08, 0x7c, 0x06, 0x60, 0x15, 0x20,
				0xfc, 0x3f, 0x8f, 0x90, 0x00,
			},
			nil,
		)

	client := new(OATH)
	client.card = testCard

	res, err := client.Select()

	assert.Empty(res.Algorithm)
	assert.Empty(res.Challenge)
	assert.Equal(fmt.Sprintf("% x", []byte{0x7c, 0x06, 0x60, 0x15, 0x20, 0xfc, 0x3f, 0x8f}), fmt.Sprintf("% x", res.Name))
	assert.Equal(fmt.Sprintf("% x", []byte{0x04, 0x03, 0x03}), fmt.Sprintf("% x", res.Version))

	assert.NoError(err)

	testCard.AssertExpectations(t)

}
